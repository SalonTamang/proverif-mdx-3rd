type key.  (* symmetric keys *)
type pkey. (* public keys *)
type skey. (* private (secret) keys *)
type spkey. 		(* Signed public key *)
type sskey. 		(* Signed private key *)

(* Symmetric key encryption *)
fun symenc(bitstring,key): bitstring.
reduc forall x: bitstring, y: key; symdec(symenc(x,y),y) = x.

(* Asymmetric key encryption *)
fun pk(skey): pkey.
fun aenc(bitstring, pkey): bitstring.
reduc forall x: bitstring, y: skey; adec(aenc(x, pk(y)),y) = x.

(* Signatures *)
fun spk(sskey): spkey.
fun sign(bitstring, sskey): bitstring.
reduc forall m: bitstring, k: sskey; getmess(sign(m,k)) = m.
reduc forall m: bitstring, k: sskey; checksign(sign(m,k), spk(k)) = m.

(* Simple handshake protocol*)
free c : channel .
free s:bitstring [private].
query attacker(s).

let clientA(pkA:pkey, skA:skey, pkB:spkey) = 
out(c, pkA) ;
in(c, x: bitstring );
let y = adec(x, skA) in
let (=pkB, k:key) = checksign(y, pkB) in 
out (c, symenc(s, k)).

let serverB(pkB:spkey,skB:sskey) = 
in(c, pkX: pkey);
new k:key;
out (c, aenc(sign((pkB, k), skB), pkX)); 
in(c,x:bitstring);
let z = symdec(x,k) in
0.

process
new skA:skey; new skB:sskey;
let pkA = pk(skA) in out(c,pkA);
let pkB = spk(skB) in out(c,pkB);
( (!clientA(pkA,skA,pkB)) | (!serverB(pkB,skB)) )